package com.qing;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;



public class SaoLei implements ActionListener {//让扫雷实现ActionListener
	JFrame frame =new JFrame("王东杰的扫雷");//定义窗口
	JButton reset=new JButton("reset");
	Container container=new Container();//建立一个容器
	
	
	
//	任务3:定义游戏数据结构,final 是常量
	final int row=10;//定义按钮行数,下面会经常用到,到时候改行数的时候只要改这里即可
	final int col=10;//定义按钮列数
	final int LeiCount=10;//定义雷的个数
	JButton[][] buttons=new JButton[row][col];//用一个二维数组储存数据,到时候排雷,等一系列操作都需要用到
	int[][] counts=new int[row][col];//整形二维数组去计算每个按钮周边有几颗雷;
	final int LEICODE=10;//雷的代码定义为10;因为一个按钮周边最多8颗雷,定义雷为十绝对不冲突
	
	
	
	//构造函数
	public SaoLei() {
		//任务1.显示窗口
		frame.setSize(600, 700);
		frame.setResizable(false);//false表示生产窗体的时候用户不可以自由改变大小
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setBackground(Color.gray);//AWT中的Frame可以用setBackground设置颜色,而JFrame必须getContentPane().setBackground(Color.yellow)来设置背景颜色
		frame.setLayout(new BorderLayout());//BorderLayout布局管理器是Layout的一种,他分为上下左右中三个 部分(在这个游戏中只要上中即可,中会覆盖除了上的所有内容)
		
		
		
		//任务2:添加重来按钮
		addResetButton();//这个要放在setVisible的前面不然这个按钮就不能显示

		//任务4:
		addButtons();
		
		//任务6:埋雷
		addLei();
		
		//任务7:添加雷的计算
		calcNeiboLei();
		
		frame.setVisible(true);
	}
	
	//雷的计算
	void calcNeiboLei() {
		int count;
		for(int i=0;i<row;i++) {
			for(int j=0;j<col;j++) {
				count=0;
				if(counts[i][j]==LEICODE) continue;
				
				if(i>0 && j>0 && counts[i-1][j-1]==LEICODE) count++;
				if(i>0 && counts[i-1][j]==LEICODE) count++;
				if(i>0 && j<9 && counts[i-1][j+1]==LEICODE) count++;
				if(j>0 && counts[i][j-1]==LEICODE) count++;
				if(j<9 && counts[i][j+1]==LEICODE) count++;
				if(i<9 && j>0 && counts[i+1][j-1]==LEICODE) count++;
				if(i<9 && counts[i+1][j]==LEICODE) count++;
				if(i<9 && j<9 && counts[i+1][j+1]==LEICODE) count++;
				
				counts[i][j]=count;
//				buttons[i][j].setText(counts[i][j]+" ");//测试用的
			}
		}
	}


	//埋雷的方法
	void addLei() {
		// TODO Auto-generated method stub
		Random rand=new Random();
		int randRow,randCol;
		for(int i=0;i<LeiCount;i++) {
			randRow=rand.nextInt(row);//表示随机生成一个0到row-1之间的数
			randCol=rand.nextInt(col);
			if(counts[randRow][randCol]==LEICODE) {
				i--;
			}else {
				counts[randRow][randCol]=LEICODE;
//				buttons[randRow][randCol].setText("x");//将这些埋着雷的按钮做上记号,来检验埋雷是否成功
			}
		}
	}

	void addButtons() {
		// TODO Auto-generated method stub
		frame.add(container,BorderLayout.CENTER);//把container塞到BorderLayout的中间
		container.setLayout(new GridLayout(row,col));//GridLayout是网格布局管理器,只要告诉其行和列即可
		for(int i=0;i<row;i++) {
			for(int j=0;j<10;j++) {
				JButton button=new JButton();
				button.addActionListener(this);//如果有人点这个button就找this
				button.setBackground(Color.gray);
				buttons[i][j]=button; //这里和布局无关,是为了对按钮进行定位,然后方便操作
				container.add(button);//将button加入container中
			}
		}
	}

	//将添加按钮的代码放到一个方法里使代码更美观
	void addResetButton() {
		reset.setBackground(Color.gray);
		reset.setOpaque(true);//设置透明度;true表可以反映出底色(是指你设置的按钮的底色)也就是不透明
		reset.addActionListener(this);
		frame.add(reset,BorderLayout.NORTH);//把reset这个按钮添加到frame中来且在布局管理器的北边(上面);
	}
	
	//重写actionPerformed,点击按钮后会找到这个方法
	@Override
	public void actionPerformed(ActionEvent e) {
		JButton button=(JButton)e.getSource();//getSource是获取事件所作用的对象,因为button是个按钮所以赋给button之前要强制转换成JButton;
		if(button.equals(reset)) {//如果按的是reset则...
			for(int i=0;i<row;i++) {
				for(int j=0;j<col;j++) {
					buttons[i][j].setText("");
					buttons[i][j].setEnabled(true);
					buttons[i][j].setBackground(Color.gray);
					counts[i][j]=0;
				}
			}
			addLei();
			calcNeiboLei();
		}else {
			int count=0;//为了之后进行判断是否为十比较容易
			for(int i=0;i<row;i++) {
				for(int j=0;j<col;j++) {
					if(button.equals(buttons[i][j])) {
						count=counts[i][j];
						if(count==LEICODE) {
							loseGame();//去调用这个方法
						}else {
							openCell(i,j);
							checkWin();
						}
						return;//找到我们点击的按钮后就结束循环,提高运行效率
					}
				}
			}
		}
	}
	
	//判断是否赢了
	void checkWin() {
		for(int i=0;i<row;i++) {
			for(int j=0;j<col;j++) {
				if (buttons[i][j].isEnabled()==true && counts[i][j] !=LEICODE) return;//发现任何一个没打开且不为雷的按钮终止这个方法
			}
		}
		
		JOptionPane.showMessageDialog(frame, "You win the game");
	}

	void openCell(int i,int j) {
		// TODO Auto-generated method stub
		if(buttons[i][j].isEnabled()==false) return;//当isEnabled()==false时说明已经打开过了
		
		buttons[i][j].setEnabled(false);//不能再点击了
		buttons[i][j].setBackground(Color.yellow);
		
		if(counts[i][j]==0) {
			if(i>0 && j>0 && counts[i-1][j-1]!=LEICODE) openCell(i-1,j-1);
			if(i>0 && counts[i-1][j]!=LEICODE) openCell(i-1,j);
			if(i>0 && j<9 && counts[i-1][j+1]!=LEICODE) openCell(i-1,j+1);
			if(j>0 && counts[i][j-1]!=LEICODE) openCell(i,j-1);
			if(j<9 && counts[i][j+1]!=LEICODE) openCell(i,j+1);
			if(i<9 && j>0 && counts[i+1][j-1]!=LEICODE) openCell(i+1,j-1);
			if(i<9 && counts[i+1][j]!=LEICODE) openCell(i+1,j);
			if(i<9 && j<9 && counts[i+1][j+1]!=LEICODE) openCell(i+1,j+1);
		}else {//如果不是0就标上数字,上面没有标数字的代码所以是0就不标
			buttons[i][j].setText(counts[i][j]+" ");
			buttons[i][j].setOpaque(true);//false表示透明,透明之后会显示JFrame窗口的底色
		}
	}

	//踩到雷的结果
	void loseGame() {
		// TODO Auto-generated method stub
		for(int i=0;i<row;i++) {
			for(int j=0;j<col;j++) {
				int count=counts[i][j];
				if(count==LEICODE) {
					ImageIcon icon = new ImageIcon("E:\\新建文件夹\\java\\java程序设计2017年下\\实验题\\第11周实验./地雷图.png");
					Image temp2 = icon.getImage().getScaledInstance(buttons[i][j].getWidth(),
							buttons[i][j].getHeight(), icon.getImage().SCALE_DEFAULT);
					icon = new ImageIcon(temp2);
					icon = new ImageIcon(temp2);
					buttons[i][j].setIcon(icon);
//					buttons[i][j].setText("X");//((((((((记住这里换成图片加上音效
					buttons[i][j].setEnabled(false);
					buttons[i][j].setBackground(Color.red);
					buttons[i][j].setOpaque(true);//false表示透明,透明之后会显示JFrame窗口的底色
				}else {
					buttons[i][j].setText(count+" ");
					buttons[i][j].setEnabled(false);
					buttons[i][j].setBackground(Color.yellow);
					buttons[i][j].setOpaque(true);//false表示透明,透明之后会显示JFrame窗口的底色
				}
			}
		}
	}

	//main函数
	public static void main(String[] args) {
		SaoLei lei =new SaoLei();
	}

	
}
